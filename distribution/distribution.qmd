---
title: "Verteilungs Plotss & Erläuterung"
subtitle: "Challenge CWM1"
author: "Livio Prosdocimo, Roberto Lorusso, Linus Ackermann"
date: last-modified
date-format: "DD.MM.YYYY"
format: html
toc: true
toc-title: "Inhaltsverzeichnis"
echo: false
---

```{r}
#| warning: false
#| message: false
#| code-summary: "Loading Library and configure output"

library(ggplot2)
library(tidyverse)
library(fitdistrplus)
library(univariateML)
library(MASS)
```

# Einführung

Dieser Bericht enthält die Analysen der für die Auswahl der Verteilung erforderlichen Plots sowie unsere entsprechenden Erläuterungen.

# Verteilungen
## Verteilungen Zone 1

```{r}
#| code-summary: "Data Wrangling Zone 1"

# Read Data
zone_raw_1 <- read.csv("../resources/out_1.csv")

# Data Wrangling
zone_1 <- zone_raw_1 %>% 
  filter(Datum != "",) %>% 
  mutate(
    datetime = ymd_hm(paste(Datum, Uhrzeit, sep = " ")), 
    masse = Masse..kg., 
    velocity = Geschwindigkeit..m.s.) %>% 
  arrange(datetime) %>% 
  filter(masse > 0) %>% 
  dplyr::select(datetime, masse, velocity)


# Data Wrangling for Time Difference
time_diff_1 <- data.frame(
  stunden = as.numeric(diff(zone_1$datetime))
  ) %>% 
  mutate(stunden = stunden /60/60) # Um stunden zu erhalten
```

### Zone 1 Masse

Als erstes wird die Masse am Hang 1 untersucht.

Dazu werden mit dem Paket fitdistr verschiedene Verteilungen auf die Variablen appliziert.

Im nächsten Schritt werden sämtliche Verteilungen in einem Histogramm visualisiert, das die Daten umfassend abbildet. In einem weiteren Diagramm, dem Cullen-Frey-Diagramm, erfolgt ein Vergleich zwischen den Datenpunkten und den verschiedenen Verteilungen.  Die Verteilungen, die den Beobachtungspunkten am nächsten liegen, sind tendenziell kompatibler.

Diese beiden Vergleiche allein erlauben noch keine endgültige Entscheidung darüber, welche Verteilung am besten geeignet ist. Sie helfen jedoch, die Auswahl potenziell geeigneter Verteilungen einzugrenzen und geben eine Orientierung für die weiteren Analysen mit den Daten.

Es zeigt sich, dass nur die Weibull- und die Lognormalverteilung in Frage kommen.

```{r}
#| code-summary: "Load Distribution"

# Calc Distribution
mass.norm_1 <- fitdist(zone_1$masse, "norm")
mass.unif_1 <- fitdist(zone_1$masse, "unif")
mass.lnorm_1 <- fitdist(zone_1$masse, "lnorm")
mass.weibull_1 <- fitdist(zone_1$masse, "weibull")
mass.legend_1 <- c("Normal", "Unif", "Lognormal","Weibull")
```


```{r}
#| code-summary: "Histogram and Cullen-Frey-Graph"

# Plot different Distributions for mass
denscomp(list(mass.norm_1, mass.unif_1, mass.lnorm_1, mass.weibull_1), legendtext = mass.legend_1, plotstyle = "ggplot")
descdist(zone_1$mass, boot = 10000, discrete = FALSE)
```

Zur endgültigen Bestimmung der Verteilung ist es erforderlich, die Daten in CDF-, QQ- und PP-Plots zu analysieren. Dabei stellen die Punkte in den Plots den Vergleich der vorhandenen Daten auf der Y-Achse mit den theoretischen Werten der Verteilung auf der X-Achse dar.

Beim QQ-Plot werden die Quantile, beim PP-Plot die Perzentile und beim CDF-Plot die kumulative Verteilungsfunktion verglichen. Wie gut eine Verteilung zu den Daten passt, kann an den Linien abgelesen werden. Wenn die Punkte des Vergleichs auf der Linie liegen, passt die Verteilung gut zu den Daten.

Die UnivariateML-Funktion ermöglicht es, verschiedene Verteilungen im Voraus zu testen, um herauszufinden, welche am besten zu den Daten passt. Sie vergleicht die Kompatibilität der Daten mit verschiedenen Verteilungen und bietet somit eine Möglichkeit, eine mögliche Passform für die vorliegenden Daten zu ermitteln. Die Funktion UnivariateML unterstützt bei der Auswahl von Verteilungen, bietet jedoch keine endgültige Entscheidung.

UnivariateML empfiehlt die Lognormalverteilung.

```{r}
#| code-summary: "PP-Plot, QQ-Plot, CDF-Plot and UnivariateML-Function"

# Die passen am besten
plot(mass.lnorm_1)
title(main = "Lognormalverteilung", col.main = "red", line = 3)

plot(mass.weibull_1)
title(main = "Weibullverteilung", col.main = "red", line = 3)

model_select(zone_1$masse)#lognormalverteilung
```

Beim Vergleich der Masse am Hang 1 liegt die Lognormalverteilung nahe an der Linie, nur das letzte Quantil im QQ-Plot weicht deutlich ab. Bei der Weibullverteilung sind die Punkte etwas weiter von der Linie entfernt. Das letzte Quantil liegt jedoch nahe an der Linie.

Trotz kleiner Abweichungen wird die Weibullverteilung gewählt. Größere Massen bedeuten ein höheres Risiko. Diese Verteilung deckt die schwersten Massen am besten.

Dieser Vorgang wird für die Auswahl für alle Variablen wiederholt.

### Zone 1 Geschwindigkeit

Bei der ersten Analyse wird festgestellt, dass die Normalverteilung, die Weibullverteilung, die Gammaverteilung oder die Lognormalverteilung passen könnten.

UnivariateML schlägt die Normalverteilung vor.

```{r}
#| code-summary: "Load Distribution"

# Calc Distribution
velocity.norm_1 <- fitdist(zone_1$velocity, "norm")
velocity.expo_1 <- fitdist(zone_1$velocity, "exp")
velocity.unif_1 <- fitdist(zone_1$velocity, "unif")
velocity.lnorm_1 <- fitdist(zone_1$velocity, "lnorm")
velocity.gamm_1 <- fitdist(zone_1$velocity, "gamma")
velocity.weibull_1 <- fitdist(zone_1$velocity, "weibull")
velocity.legend_1 <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
```


```{r}
#| code-summary: "Histogram, Cullen-Frey-Graph and UnivariateML-Function"

# Plot different Distributions for velocity
denscomp(list(velocity.norm_1, velocity.expo_1, velocity.unif_1, velocity.lnorm_1, velocity.gamm_1, velocity.weibull_1), legendtext = velocity.legend_1, plotstyle = "ggplot")
descdist(zone_1$velocity, boot = 10000, discrete = FALSE)


#check
model_select(zone_1$velocity)#Normalverteilung 
```


```{r}
#| code-summary: "PP-Plot, QQ-Plot and CDF-Plot"

# Die passen am besten
plot(velocity.norm_1)
title(main = "Normalverteilung", col.main = "red", line = 3)

plot(velocity.weibull_1)
title(main = "Weibullverteilung", col.main = "red", line = 3)

plot(velocity.gamm_1)
title(main = "Gammaverteilung", col.main = "red", line = 3)

plot(velocity.lnorm_1)
title(main = "Lognormalverteilung", col.main = "red", line = 3)
```

Der Vergleich der Plots zeigt, dass die Normalverteilung am besten passt. Die Punkte liegen fast alle auf der Linie. Insbesondere bei den höheren Werten passt diese Verteilung am besten. Die Normalverteilung wird ausgewählt.

### Zone 1 Zeitabstände

Nach einer ersten Analyse scheint nur eine Exponential- oder Normalverteilung in Frage zu kommen. 

UnivariateML schlägt vor, die Exponentialverteilung zu prüfen.

```{r}
#| code-summary: "Load Distribution"

# Calc Distribution
time_diff.norm_1 <- fitdist(time_diff_1$stunden, "norm")
time_diff.unif_1 <- fitdist(time_diff_1$stunden, "unif")
time_diff.expo_1 <- fitdist(time_diff_1$stunden, "exp")
time_diff.legend_1 <- c("Normal", "Unif", "Expo")
```


```{r}
#| code-summary: "Histogram, Cullen-Frey-Graph and UnivariateML-Function"

# Plot different Distributions for velocity
denscomp(list(time_diff.norm_1, time_diff.unif_1, time_diff.expo_1), legendtext = time_diff.legend_1, plotstyle = "ggplot")
descdist(time_diff_1$stunden, boot = 10000)

#check
model_select(time_diff_1$stunden)#Exponentailverteilung
```


```{r}
#| code-summary: "PP-Plot, QQ-Plot and CDF-Plot"

# Die passen am besten 
plot(time_diff.norm_1)
title(main = "Normalverteilung", col.main = "red", line = 3)

plot(time_diff.expo_1)
title(main = "Exponentialverteilung", col.main = "red", line = 3)
```

Die Auswertung der Plots zeigt eindeutig, dass die Exponentialverteilung am besten passt.

Die Exponentialverteilung deckt die kleineren Werte besser ab, insbesondere bei den zeitlichen Abständen. Hier sind die kleineren Werte entscheidend, da weniger Zeitintervalle mehrere Steinschläge bedeuten und somit eine erhöhte Gefahr darstellen.Die Auswertung der Plots zeigt deutlich, dass die Exponentialverteilung am besten passt.

```{r}
#| code-summary: "Data Wrangling Zone 2"

# Read Data
zone_raw <- read.csv("../resources/out_2.csv")

# Data Wrangling
zone <- zone_raw %>% 
  filter(Date != "",) %>% 
  mutate(
    datetime = ymd_hm(paste(Date, Uhrzeit, sep = " ")), 
    masse = m..kg., 
    velocity = v..m.s.) %>% 
  arrange(datetime) %>% 
  filter(masse > 0) %>% 
  dplyr::select(datetime, masse, velocity)

# Data Wrangling for Time Difference
time_diff <- data.frame(
  stunden = as.numeric(diff(zone$datetime)))
```

## Verteilungen Zone 2
### Zone 2 Masse

Nach einer ersten Prüfung bleiben die Weibull-, Gamma-, Exponential- und Lognormalverteilung als Auswahlmöglichkeiten.

UnivariateML schlägt die Exponentialverteilung vor.

```{r}
#| code-summary: "Load Distribution"

# Calc Distribution
mass.norm <- fitdist(zone$masse, "norm")
mass.expo <- fitdist(zone$masse, "exp")
mass.unif <- fitdist(zone$masse, "unif")
mass.lnorm <- fitdist(zone$masse, "lnorm")
mass.gamm <- fitdist(zone$masse, "gamma")
mass.weibull <- fitdist(zone$masse, "weibull")
mass.legend <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
```


```{r}
#| code-summary: "Histogram, Cullen-Frey-Graph and UnivariateML-Function"

# Plot different Distributions for mass
denscomp(list(mass.norm, mass.expo, mass.unif, mass.lnorm, mass.gamm, mass.weibull), legendtext = mass.legend, plotstyle = "ggplot")
descdist(zone$mass, boot = 10000, discrete = FALSE)

#Check
model_select(zone$masse)#Exponentialverteilung
```


```{r}
#| code-summary: "PP-Plot, QQ-Plot and CDF-Plot"

# Die passen am besten 
plot(mass.expo)
title(main = "Exponentialverteilung", col.main = "red", line = 3)

plot(mass.gamm)
title(main = "Gammaverteilung", col.main = "red", line = 3)

plot(mass.weibull)
title(main = "Weibullverteilung", col.main = "red", line = 3)

plot(mass.lnorm)
title(main = "Lognormalverteilung", col.main = "red", line = 3)
```

Gamma und Weibull ähneln der Exponentialverteilung, decken aber die oberen Werte schlechter ab. Die Lognormalverteilung liegt näher an der Linie, lässt aber das letzte Quantil im PP-Plot aus. Auch am zweiten Hang ist die größere Masse ausschlaggebender. Gewählt wird die Exponentialverteilung.

### Zone 2 Geschwindigkeit

Die Diagramme zeigen, dass die Normal-, Lognormal-, Weibull- und Gammaverteilung zur Auswahl stehen.

UnivariateML schlägt die Weibullverteilung vor.

```{r}
#| code-summary: "Load Distribution"

# Calc Distribution
velocity.norm <- fitdist(zone$velocity, "norm")
velocity.expo <- fitdist(zone$velocity, "exp")
velocity.unif <- fitdist(zone$velocity, "unif")
velocity.lnorm <- fitdist(zone$velocity, "lnorm")
velocity.gamm <- fitdist(zone$velocity, "gamma")
velocity.weibull <- fitdist(zone$velocity, "weibull")
velocity.legend <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
```


```{r}
#| code-summary: "Histogram, Cullen-Frey-Graph and UnivariateML-Function"

# Plot different Distributions for velocity
denscomp(list(velocity.norm, velocity.expo, velocity.unif, velocity.lnorm, velocity.gamm, velocity.weibull), legendtext = velocity.legend, plotstyle = "ggplot")
descdist(zone$velocity, boot = 10000, discrete = FALSE)

#Check
model_select(zone$velocity)#Weibullverteilung
```


```{r}
#| code-summary: "PP-Plot, QQ-Plot and CDF-Plot"

plot(velocity.norm)
title(main = "Normalverteilung", col.main = "red", line = 3)

plot(velocity.lnorm)
title(main = "Lognormalverteilung", col.main = "red", line = 3)

plot(velocity.gamm)
title(main = "Gammaverteilung", col.main = "red", line = 3)

plot(velocity.weibull)
title(main = "Weibullverteilung", col.main = "red", line = 3)
```

Basierend auf der Auswertung lässt sich feststellen, dass die Weibullverteilung die Daten umfassend abdeckt. Daher wird diese Verteilung gewählt.

### Zone 2 Zeitabstände

In diesem Fall stehen die Weibull-, Gamma-, Exponential- und Lognormalverteilung als Optionen zur Verfügung.

UnivariateML empfiehlt die Gamma-Verteilung.

```{r}
#| code-summary: "Load Distribution"

# Calc Distribution
time_diff.norm <- fitdist(time_diff$stunden, "norm")
time_diff.expo <- fitdist(time_diff$stunden, "exp")
time_diff.unif <- fitdist(time_diff$stunden, "unif")
time_diff.lnorm <- fitdist(time_diff$stunden, "lnorm")
time_diff.gamm <- fitdist(time_diff$stunden, "gamma")
time_diff.weibull <- fitdist(time_diff$stunden, "weibull")
time_diff.legend <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
```


```{r}
#| code-summary: "Histogram, Cullen-Frey-Graph and UnivariateML-Function"

# Plot different Distributions for time difference

denscomp(list(time_diff.norm, time_diff.expo, time_diff.unif, time_diff.lnorm, time_diff.gamm, time_diff.weibull), legendtext = time_diff.legend, plotstyle = "ggplot")
descdist(time_diff$stunden, boot = 10000)

#Check
model_select(time_diff$stunden)#Gammaverteilung
```


```{rS}
#| code-summary: "PP-Plot, QQ-Plot and CDF-Plot"

# Die passen am besten 
plot(time_diff.lnorm)
title(main = "Lognormalverteilung", col.main = "red", line = 3)

plot(time_diff.gamm)
title(main = "Gammaverteilung", col.main = "red", line = 3)

plot(time_diff.weibull)
title(main = "Weibullverteilung", col.main = "red", line = 3)

plot(time_diff.expo)
title(main = "Exponentialverteilung", col.main = "red", line = 3)
```

Sowohl die Gamma- als auch die Weibullverteilung erscheinen als präzise Verteilungen. Die Wahl fällt auf die Gammaverteilung, da sie der Empfehlung von UnivariateML entspricht und auch im Vergleich die unteren Werte besser abdeckt.