---
title: "Bericht Steinschlagrisiko"
subtitle: "Challenge CWM1"
author: "Livio Prosdocimo, Roberto Lorusso, Linus Ackermann"
date: last-modified
date-format: "DD.MM.YYYY"
format: pdf
toc: true
toc-title: "Inhaltsverzeichnis"
echo: false
---

```{r}
#| warning: false
#| message: false
#| code-summary: "Loading Library and configure output"

options(scipen = 999)

library(ggplot2)
library(future.apply)
library(tidyverse)
library(fitdistrplus)
library(univariateML)
library(MASS)
library(dplyr)
```

\newpage

# Problem

Die Kantonsstrasse nach Schiers GB ist von Steinschlägen betroffen. Um die Sicherheit der Verkehrsteilnehmer zu gewährleisten, wurde im Auftrag des Kantonsingenieurs diese Risikoanalyse erstellt.

An zwei Stellen des Hangs fallen täglich Steine herunter. Bevor diese die Strasse erreichen, werden sie von Fangnetzen aufgehalten. Diese Netze können eine bestimmte Menge an Energie von herabfallenden Steinen aufnehmen. Wenn jedoch Steine in den Netzen liegen, verringert sich ihre Haltekraft. Die Netze werden täglich geräumt. Durch die Abnutzung der Netze hat sich die Stabilität beeinträchtigt und das Risiko erhöht.

Es muss entschieden werden, ob eine Strassensperrung unvermeidlich ist. Diese Analyse soll die Basis für die Entscheidung des Kantonsingenieurs bilden.

# Wahrscheinlichkeitsmodellierung

Die Bestimmung einer Strassensperrung besteht in der Ermittlung der modellierten Wahrscheinlichkeit für einen Todesfall infolge eines Steinschlags. Dabei ist eine Berücksichtigung diverser Variablen erforderlich, welche einen Einfluss auf einen tatsächlichen Todesfall ausüben. Die Zusammensetzung dieser Variablen determiniert die Gesamtwahrscheinlichkeit für einen Todesfall, welche eine Jährliche Wahrscheinlichkeit von 0.002 nicht überschreiten darf, um das Risiko auszuschliessen.

\newpage

## Zufallsvariablen

Im ersten Schritt muss ein Todesfall simuliert und die Schritte bis zu diesem Ereignis analysiert werden, um die relevanten Variablen zu identifizieren.

Ein Steinschlag mit einer so grossen Energie, dass die Netze reissen, ist erforderlich, damit eine Verkehrsperson auf dieser Strasse ums Leben kommen könnte. Ausserdem muss sich während dieses durchbrechenden Steinschlags ein Fahrer in der Todeszone befinden. Die Todeszone bezeichnet den Bereich, in dem eine Reaktion nicht mehr möglich ist und ein Zusammenprall unausweichlich ist.

Zunächst sind die Umstände zu eruieren, unter denen ein Steinschlag ein Netz durchbrechen kann. Zu diesem Zweck wurden durch Expertisen folgende Kriterien anhand gesammelten Daten definiert.

-   Ein Steinschlag bricht durch, wenn die Energie 1200 kNm übersteigt.
-   Ebenso reissen die Netze, wenn das Gewicht der bereits im Netz befindlichen Steine, also der vorherigen Steinschlägen, über 2000 kg beträgt. In diesem Fall erfolgt ein Reissen der Netze bereits bei einem Steinschlag von 600 kNm.
-   Die Entfernung der Steine im Netz erfolgt durch ein vor Ort stationiertes Team, welches spätestens alle 24 Stunden tätig wird.

Somit müssen folgende Eigenschaften eines Steinschlags berücksichtigt werden, um die Wahrscheinlichkeit eines Durchbruchs zu definieren:

-   Geschwindigkeit und Masse der Steinschläge: Diese sind erforderlich, um die Energie eines Steinschlags zu berechnen.

-   Die zeitlichen Abstände zwischen den Steinschlägen und deren Masse: Diese Informationen sind notwendig, um herauszufinden, wie viele Steine sich noch im Netz befinden könnten und welche Masse sie haben.

Um diese beiden Aspekte zu ermitteln, benötigen wir Daten über die Masse, Geschwindigkeit und zeitlichen Abständen der Steine. Experten und Geologen haben diese Daten in den letzten Monaten bei den vorkommenden Steinschlägen gesammelt und für die Modellierung zur Verfügung gestellt. Diese Daten bilden die Grundlage für diese Analyse.

In den folgenden Abschnitten wird die Berechnung bis zum Durchbrechen eines Fangnetzes durch einen Steinschlag behandelt. Die Todeszone wird am Schluss der Analyse bei der Gesamtkalkulation berücksichtigt.

## Verteilungen

Da Steinschläge über einen Zeitraum von drei Monaten aufgrund der begrenzten Anzahl an Ereignissen keine verlässlichen Aussagen über die aktuelle Gefahr ermöglichen, müssen Fälle nachgestellt werden und zwar möglichst viele. Um eine solche Simulation korrekt durchzuführen, werden die vorhandenen Daten der Steinschläge in die genannten Variablen Masse, Geschwindigkeit und zeitliche Abstände unterteilt.

Dann können diese Daten anhand ihren Eigenschaften simuliert werden. Davor wird aber jeder Variable eine Wahrscheinlichkeitsverteilung zugeordnet. Durch die Zuordnung können Fälle repdorduziert werden, welche die Eigenschaften der Daten anhand den gewählten theoretischen Modellen widerspiegelen. Im nächsten Schritt werden den Variablen Verteilungen zugeteilt. Da zwei stellen an der Strasse von Steinschläge betroffen sind, müssen diese getrennt betrachtet werden, Beide Hänge haben ihre eigenen Eigenschaften bezüglich Masse, Geschwindigkeit und den Zeitlichen Unterscherschiede.

### Wahl der Verteilungen {#wahl-der-verteilungen}

Mit dem fitdistr-Package können die verschiedenen Verteilungen auf die Daten angewendet werden.

Alle verwendeten Verteilungen durchlaufen dann einen Prozess, in dem die am besten geeignete Verteilung ermittelt wird. Der Prozess ist folgend durchgeführt worden:

1.  Zunächst wird ein Histogramm der Daten mit den Verteilungen als Linien betrachtet. Die Verteilungen, welche den Balken besser folgen sind eher geeignet.

2.  In einem Cullen-Frey-Diagramm, werden die Datenpunkte zusammen mit den Verteilungen verglichen. Die Verteilungen, die am nächsten an den Beobachtungspunkten liegen, sind tendenziell besser geignet.

3.  Mit der Funktion UnivariateML können verschiedene Verteilungen bereits im Vorhinein getestet werden, um herauszufinden, welche am besten zu den Daten passt. Diese Funktion vergleicht die Kompatibilität der Daten mit verschiedenen Verteilungen und bietet somit eine Möglichkeit, eine mögliche Passform für die vorliegenden Daten zu ermitteln. Diese Funktion unterstützt die Auswahl von den verschiedenen Verteilungen.

Diese drei Schritte allein erlauben noch keine endgültige Entscheidung darüber, welche Verteilung am besten geeignet ist. Sie dienen jedoch dazu, die Auswahl der möglichen Verteilungen einzuschränken und eine Orientierung zu geben, mit welchen Daten gearbeitet wird.

Nachdem nun einige Verteilungen ausgeschlossen werden konnten, kann man sich den möglichen Verteilungen zuwenden. Man betrachtet die Verteilungen anhand von CDF-, QQ- und PP-Plots. Die Punkte in den Plots stellen die vorhandenen Daten auf der Y-Achse dar, im Vergleich zu den theoretischen Werten, welche die Verteilung erzeugt, auf der X-Achse. Danach kann eine endgültige Entscheidung getroffen werden.

In Fällen, in denen die Verteilungen ähnlich sind und eine Entscheidung schwierig ist, sollte Folgendes berücksichtigt werden.

-   Bei der Geschwindigkeit und der Masse der Steinschläge sind vor allem die Extremwerte relevant, weil diese eine erhöhte Chance haben, die Sicherheitsnetze zu durchdringen. Daher wird dort darauf geachtet, dass die Extremwerte in den QQ-, CDF- und PP-Plots korrekt abgedeckt sind.

-   Bei dem zeitlichen Abstand sind vor allem die Werte unter 24 Stunden relevant, aufgrund der Reaktionszeit für das Räumen der Sicherheitsnetze nach einem Steinschlag. Daher wird dort darauf geachtet, dass die Werte im Bereich bis 24 in den QQ-, CDF- und PP-Plots korrekt abgedeckt sind.

```{r}
#| code-summary: "Data Wrangling for zone 1"

# Read Data
zone_raw_1 <- read.csv("resources/out_1.csv")

# Data Wrangling
zone_1 <- zone_raw_1 %>% 
  filter(Datum != "",) %>% 
  mutate(
    datetime = ymd_hm(paste(Datum, Uhrzeit, sep = " ")), 
    masse = Masse..kg., 
    velocity = Geschwindigkeit..m.s.) %>% 
  arrange(datetime) %>% 
  filter(masse > 0) %>% 
  dplyr::select(datetime, masse, velocity)


# Data Wrangling for Time Difference
time_diff_1 <- data.frame(
  stunden = as.numeric(diff(zone_1$datetime))
  ) %>% 
  mutate(stunden = stunden /60/60) # Um stunden zu erhalten
```

```{r}
#| code-summary: "Distribution for zone 1"

# Calc Distribution mass zone 1
mass.norm_1 <- fitdist(zone_1$masse, "norm")
mass.unif_1 <- fitdist(zone_1$masse, "unif")
mass.lnorm_1 <- fitdist(zone_1$masse, "lnorm")
mass.weibull_1 <- fitdist(zone_1$masse, "weibull")
mass.legend_1 <- c("Normal", "Unif", "Lognormal","Weibull")
zone_1_mass <- mass.weibull_1

# Calc Distribution velocity zone 1
velocity.norm_1 <- fitdist(zone_1$velocity, "norm")
velocity.expo_1 <- fitdist(zone_1$velocity, "exp")
velocity.unif_1 <- fitdist(zone_1$velocity, "unif")
velocity.lnorm_1 <- fitdist(zone_1$velocity, "lnorm")
velocity.gamm_1 <- fitdist(zone_1$velocity, "gamma")
velocity.weibull_1 <- fitdist(zone_1$velocity, "weibull")
velocity.legend_1 <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
zone_1_velocity <- velocity.norm_1

# Calc Distribution time_diff zone 1
time_diff.norm_1 <- fitdist(time_diff_1$stunden, "norm")
time_diff.unif_1 <- fitdist(time_diff_1$stunden, "unif")
time_diff.expo_1 <- fitdist(time_diff_1$stunden, "exp")
time_diff.legend_1 <- c("Normal", "Unif", "Expo")
zone_1_time <- time_diff.expo_1
```

```{r}
#| code-summary: "Data Wrangling for zone 2"

# Read Data
zone_raw <- read.csv("resources/out_2.csv")

# Data Wrangling
zone <- zone_raw %>% 
  filter(Date != "",) %>% 
  mutate(
    datetime = ymd_hm(paste(Date, Uhrzeit, sep = " ")), 
    masse = m..kg., 
    velocity = v..m.s.) %>% 
  arrange(datetime) %>% 
  filter(masse > 0) %>% 
  dplyr::select(datetime, masse, velocity)

# Data Wrangling for Time Difference
time_diff <- data.frame(
  stunden = as.numeric(diff(zone$datetime)))
```

```{r}
#| code-summary: "Distribution for zone 1"

# Calc Distribution velocity zone 2
mass.norm <- fitdist(zone$masse, "norm")
mass.expo <- fitdist(zone$masse, "exp")
mass.unif <- fitdist(zone$masse, "unif")
mass.lnorm <- fitdist(zone$masse, "lnorm")
mass.gamm <- fitdist(zone$masse, "gamma")
mass.weibull <- fitdist(zone$masse, "weibull")
mass.legend <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
zone_2_mass <- mass.expo

# Calc Distribution velocity zone 2
velocity.norm <- fitdist(zone$velocity, "norm")
velocity.expo <- fitdist(zone$velocity, "exp")
velocity.unif <- fitdist(zone$velocity, "unif")
velocity.lnorm <- fitdist(zone$velocity, "lnorm")
velocity.gamm <- fitdist(zone$velocity, "gamma")
velocity.weibull <- fitdist(zone$velocity, "weibull")
velocity.legend <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
zone_2_velocity <- velocity.weibull

# Calc Distribution time_diff zone 2
time_diff.norm <- fitdist(time_diff$stunden, "norm")
time_diff.expo <- fitdist(time_diff$stunden, "exp")
time_diff.unif <- fitdist(time_diff$stunden, "unif")
time_diff.lnorm <- fitdist(time_diff$stunden, "lnorm")
time_diff.gamm <- fitdist(time_diff$stunden, "gamma")
time_diff.weibull <- fitdist(time_diff$stunden, "weibull")
time_diff.legend <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
zone_2_time <- time_diff.gamm
```

\newpage

### Gewählte Verteilungen {#gewählte-verteilungen}

In der folgenden Tabelle ist ersichtlich, welche Verteilungsfunktionen gewählt wurden. Anhand unseres beschriebenen [Verfahrens](#wahl-der-verteilungen). Die Parameter sind die ausgerechneten Werte, welche für das Generieren anhand der Verteilungsfunktion benötigt werden.

| Zufallsvariable | Zone | Verteilung  | Parameter 1                     | Parameter 2                     |
|---------------|:--------------|---------------|---------------|---------------|
| Masse           | 1    | Weibul      | `r zone_1_mass$estimate[1]`     | `r zone_1_mass$estimate[2]`     |
| Geschwindigkeit | 1    | Normal      | `r zone_1_velocity$estimate[1]` | `r zone_1_velocity$estimate[2]` |
| Zeitabstand     | 1    | Exponential | `r zone_1_time$estimate[1]`     |                                 |
| Masse           | 2    | Exponential | `r zone_2_mass$estimate[1]`     |                                 |
| Geschwindigkeit | 2    | Weibul      | `r zone_1_velocity$estimate[1]` | `r zone_1_velocity$estimate[2]` |
| Zeitabstand     | 2    | Gamma       | `r zone_1_time$estimate[1]`     |                                 |

# Simulation

Nun sind den Zufallsvariablen Verteilungen zugeordnet. Der nächste Schritt ist die Simulation.

## Generieren

```{r}
#| code-summary: "Set amount interation"

amount_iteration <- 1e7
```

Das Generieren der Zufallsveriablen wurde mit R umgesetzt. Dabei wurden die Daten anhand der [gewählten Verteilungen](#gewählte-verteilungen) zufällig generiert. Insgesamt wurde für jede Zone **`r amount_iteration`** Steinschläge generiert.

```{r}
#| code-summary: "Generated Data"

set.seed(8128) # The 4. perfect number
zone_1_generated = data.frame(
  mass = rweibull(amount_iteration, shape = zone_1_mass$estimate[1], scale = zone_1_mass$estimate[2]),
  velocity = rnorm(amount_iteration, mean = zone_1_velocity$estimate[1], sd = zone_1_velocity$estimate[2]),
  time_diff = rexp(amount_iteration, rate = zone_1_time$estimate[1])
)

zone_2_generated = data.frame(
  mass = rexp(amount_iteration, rate = zone_2_mass$estimate[1]),
  velocity = rweibull(amount_iteration, shape = zone_2_velocity$estimate[1], scale = zone_2_velocity$estimate[2]),
  time_diff = rgamma(amount_iteration, shape = zone_2_time$estimate[1], rate = zone_2_time$estimate[2])
)
```

Die Kinetische Energie wird anhand der Geschwindigkeit und Masse eines Steinschlags, mittels der Physikalischen Formel berechnet und in Kilo Newton Meter umgewandelt.

$$
E_{\text{kin}} = \frac{1}{2} \times m \times v^{2}
$$\newline

```{r}
#| code-summary: "Calculate kin_energy"

zone_1_generated$kin_energy = 
  zone_1_generated$mass * zone_1_generated$velocity^2 * 0.5 / 1000

zone_2_generated$kin_energy = 
  zone_2_generated$mass * zone_2_generated$velocity^2 * 0.5 / 1000
```

\newpage

## Wahrscheinlichkeitsberechnung

Durch die Simulation von Steinschlägen ist es nun möglich, die Wahrscheinlichkeit eines Todesfalls zu berechnen. Mit den folgenden Angaben ist es möglich, die Wahrscheinlichkeit, dass das Sicherheitsnetz reisst je Steinschlag, auszurechnen. Dafür verwenden wir folgende Formel. Dass bei einem Steinschlag die Sicherheitsnetze reissen, müsste die kinetische Energie höher sein als 1200 kNm oder 600 kNm und die Masse im Sicherheitsnetz grösser oder gleich 2000 kg sein. Das Sicherheitsnetz wird alle 24 Stunden geleert. Um in der Simulation die Masse im Netz bei einem Steinschlag zu berechnen, werden rekursiv alle vergangenen Steinschläge, welche in den letzten 24 Stunden stattgefunden haben, durchlaufen und die Masse aufsummiert. Dadurch wird es ermöglicht, alle Steinschläge herauszufiltern, welche eine kinetische Energie von mindestens 1200 kNm haben oder mindestens 600 kNm und im Sicherheitsnetz eine Gesamtmasse von 2000 kg liegen.

```{r}
#| code-summary: "Monte Carlo Simulation"

plan(multisession)
has_net_exceed_maxium <- function(index, mass_net, time_since_emptying, df) {
  if (index == 1) {
    return(FALSE)
  }
  time_since_emptying <- time_since_emptying + df$time_diff[index]
  if (time_since_emptying > 24) {
    return(FALSE)
  }
  mass_net <- mass_net + df$mass[index - 1]
  if (mass_net >= 2000) {
    return(TRUE)
  }
  return(has_net_exceed_maxium(index-1, mass_net, time_since_emptying, df))
}

monte_carlo <- function(df) {
  future_lapply(1:amount_iteration, function(i) {
  return(df$kin_energy[i] >= 1200 || (df$kin_energy[i] >= 600 && has_net_exceed_maxium(i, 0, 0, df)))
    }) %>% 
    unlist() %>% 
    sum()
}

monte_carlo_zone_2 <- monte_carlo(zone_2_generated)
monte_carlo_zone_1 <- monte_carlo(zone_1_generated)
```

Mit diesen Angaben ist es möglich, die Wahrscheinlichkeit, dass das Sicherheitsnetz reisst, auszurechnen. Dafür verwenden wir folgende Formel.

$$
P_{\text{Netz reisst}} = \frac{\text{Anzahl Netz Versagen}}{\text{Anzahl Steinschläge}} 
$$

Das ein Steinschlag in einem Todesfall endet muss zusätzlich ein Auto sich in der Todeszone befinden. Um die Wahrscheinlichkeit dafür zu berechnen wird die Zeit benötigt, welches ein Auto benötigt um für einen Möglichen Steinschlag zu bremsen. Dies lässt sich aus dem Bremsweg, was sich bei einer [Gefahrenbesmung bei 18m](https://www.adac.de/verkehr/rund-um-den-fuehrerschein/erwerb/anhalteweg-berechnen/) liegt, bei einer Geschwindigkeit von 60 km/h und der Geschwindigkeit, wie folgt berechnen.

$$
t = \frac{2s}{v} \Rightarrow \frac{2\times18m}{16.\overline{6}m/s} \approx 2.16s 
$$

Dazu wird noch die [Vorbremszeit von 1.2 Sekunde](https://www.adac.de/verkehr/rund-um-den-fuehrerschein/erwerb/reaktionsweg-berechnen/) addiert, welche ein Mensch braucht um auf die Bremse zu drücken. Damit kommt man auf *3.36 Sekunden*, welche ein Auto in der Gefahrenzone ist. Durch diesen Wert können wir die Wahrscheinlichkeit berechnen, dass ein Auto zu einem beliebigen Zeitpunkt in der Gefahrenzone ist.

$$
P_{\text{Auto anwesend}} = \frac{3.36 \times \text{Anazhl Autos Pro Tag}}{\text{Anzahl Sekunden Pro Tag}} \Rightarrow \frac{3.36 \times 600}{86400} = \frac{7}{300}
$$

Mit der Wahrscheinlichkeit, dass das Sicherheitsnetz reisst, ein Auto anwesend ist und der durchschnittlichen Steinschläge pro Jahr, lässt sich die Wahrscheinlichkeit eines tödlichen Unfalls in einer Zone für ein Jahr berechnen.

$$
P_{\text{Tödlicher Unfall pro Jahr}} = P_{\text{Auto anwesend}} \times P_{\text{Netz reisst}} \times \text{ Durchschnittliche Steinschläge pro Jahr}
$$

```{r}
#| code-summary: "Calculate Propapility"

prob_auto_presenc <- 7/300

monte_carlo_zone_1.prop_net_fails <- monte_carlo_zone_1 / amount_iteration
monte_carlo_zone_2.prop_net_fails <- monte_carlo_zone_2 / amount_iteration

monte_carlo_zone_1.simulation_time <- sum(zone_1_generated$time_diff) / 24 / 365
monte_carlo_zone_2.simulation_time <- sum(zone_2_generated$time_diff) / 24 / 365

monte_carlo_zone_1.steinschlaege_per_year <- amount_iteration / monte_carlo_zone_1.simulation_time
monte_carlo_zone_2.steinschlaege_per_year <- amount_iteration / monte_carlo_zone_2.simulation_time

monte_carlo_zone_1.prob_per_year <- monte_carlo_zone_1.steinschlaege_per_year * prob_auto_presenc * monte_carlo_zone_1.prop_net_fails
monte_carlo_zone_2.prob_per_year <- monte_carlo_zone_2.steinschlaege_per_year * prob_auto_presenc * monte_carlo_zone_2.prop_net_fails

prob_per_year <- monte_carlo_zone_1.prob_per_year + monte_carlo_zone_2.prob_per_year - (monte_carlo_zone_1.prob_per_year * monte_carlo_zone_2.prob_per_year)
```

\newpage

# Ergebniss

## Zone 1

Die Simulation von `r amount_iteration` Steinschlägen in der Zone 1 ergab, dass `r monte_carlo_zone_1` Steinschläge durch das Sicherheitsnetz gingen. Dabei wurden `r monte_carlo_zone_1.simulation_time` Jahre an Steinschlägen simuliert. Wobei jährlich im Schnitt `r monte_carlo_zone_1.steinschlaege_per_year` Steinschläge herunterkommen. Daraus resultiert, eine Wahrscheinlichkeit von **`r monte_carlo_zone_1.prob_per_year`** pro Jahr, dass ein Unfall passiert.

## Zone 2

Die Simulation von `r amount_iteration` Steinschlägen in der Zone 2 ergab, dass `r monte_carlo_zone_2` Steinschläge durch das Sicherheitsnetz gingen. Dabei wurden `r monte_carlo_zone_2.simulation_time` Jahre an Steinschlägen simuliert. Wobei jährlich im Schnitt `r monte_carlo_zone_2.steinschlaege_per_year` Steinschläge herunterkommen. Daraus resultiert, eine Wahrscheinlichkeit von **`r monte_carlo_zone_2.prob_per_year`** pro Jahr, dass ein Unfall passiert.

## Gesammt

Das Verbinden der Wahrscheinlichkeiten, dass ein Unfall in Folge Steinschläge auf der Kantonsstrasse. Wird mit der folgenden Formel berechnet. $$
P_{\text{Todesfall}}(P_{\text{Todesfall Zone 1}} \cup P_{\text{Todesfall Zone 2}})
$$ Daraus resultiert eine Wahrscheinlichkeit eines Unfalls in Folge eines Steinschlages von **`r prob_per_year`**

# Empfehlung

Auf Basis der durchgeführten Simulation und Analyse der Daten, welche eine geringere jährliche Wahrscheinlichkeit als die Obergrenze von 0.002 ergeben hat. Empfehlen wir dem Kantonsingenieur, die Kantonsstrasse unterhalb Schiers (GR) nicht zu schliessen.
