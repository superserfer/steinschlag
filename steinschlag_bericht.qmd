---
title: "Bericht Steinschlagrisiko"
subtitle: "Challenge CWM1"
author: "Livio Prosdocimo, Roberto Lorusso, Linus Ackermann"
date: last-modified
date-format: "DD.MM.YYYY"
format: pdf
toc: true
toc-title: "Inhaltsverzeichnis"
echo: false
---

```{r}
options(scipen = 999)

library(ggplot2)
library(future.apply)
```

\newpage

# Problem

Die Kantonsstrasse nach Schiers GB ist von Steinschlägen betroffen. Um die Sicherheit der Verkehrsteilnehmer zu gewährleisten, wurde im Auftrag des Kantonsingenieurs diese Risikoanalyse erstellt.

An zwei Stellen des Hangs fallen täglich Steine herunter. Bevor diese die Strasse erreichen, werden sie von Fangnetzen aufgehalten. Diese Netze können eine bestimmte Menge an Energie von herabfallenden Steinen aufnehmen. Wenn jedoch Steine in den Netzen liegen, verringert sich ihre Haltekraft. Die Netze werden täglich geräumt. Durch die Abnutzung der Netze hat sich die Stabilität beeinträchtigt und das Risiko erhöht.

Es muss entschieden werden, ob eine Strassensperrung unvermeidlich ist. Diese Analyse soll die Basis für die Entscheidung des Kantonsingenieurs bilden.

\newpage

# Wahrscheinlichkeitsmodellierung

Die Bestimmung einer Strassensperrung besteht in der Ermittlung der modellierten Wahrscheinlichkeit für einen Todesfall infolge eines Steinschlags. Dabei ist eine Berücksichtigung diverser Variablen erforderlich, welche einen Einfluss auf einen tatsächlichen Todesfall ausüben. Die Zusammensetzung dieser Variablen determiniert die Gesamtwahrscheinlichkeit für einen Todesfall, welche eine Jährliche Wahrscheinlichkeit von 0.002 nicht überschreiten darf, um das Risiko auszuschliessen.

\newpage
## Zufallsvariablen

Im ersten Schritt muss ein Todesfall simuliert und die Schritte bis zu diesem Ereignis analysiert werden, um die relevanten Variablen zu identifizieren. 

Ein Steinschlag mit einer so grossen Energie, dass die Netze reissen, ist erforderlich, damit eine Verkehrsperson auf dieser Strasse ums Leben kommen könnte. Ausserdem muss sich während dieses durchbrechenden Steinschlags ein Fahrer in der Todeszone befinden. Die Todeszone bezeichnet den Bereich, in dem eine Reaktion nicht mehr möglich ist und ein Zusammenprall unausweichlich ist.

Zunächst sind die Umstände zu eruieren, unter denen ein Steinschlag ein Netz durchbrechen kann. Zu diesem Zweck wurden durch Expertisen folgende Kriterien anhand gesammelten Daten definiert.

- Ein Steinschlag bricht durch, wenn die Energie 1200 kNm übersteigt. 
- Ebenso reissen die Netze, wenn das Gewicht der bereits im Netz befindlichen Steine, also der vorherigen Steinschlägen, über 2000 kg beträgt. In diesem Fall erfolgt ein Reissen der Netze bereits bei einem Steinschlag von 600 kNm. 
- Die Entfernung der Steine im Netz erfolgt durch ein vor Ort stationiertes Team, welches spätestens alle 24 Stunden tätig wird.

Somit müssen folgende Eigenschaften eines Steinschlags berücksichtigt werden, um die Wahrscheinlichkeit eines Durchbruchs zu definieren:

-  Geschwindigkeit und Masse der Steinschläge: 
Diese sind erforderlich, um die Energie eines Steinschlags zu berechnen. 

- Die zeitlichen Abstände zwischen den Steinschlägen und deren Masse: Diese Informationen sind notwendig, um herauszufinden, wie viele Steine sich noch im Netz befinden könnten und welche Masse sie haben.

Um diese beiden Aspekte zu ermitteln, benötigen wir Daten über die Masse, Geschwindigkeit und zeitlichen Abständen der Steine. Experten und Geologen haben diese Daten in den letzten Monaten bei den vorkommenden Steinschlägen gesammelt und für die Modellierung zur Verfügung gestellt. Diese Daten bilden die Grundlage für diese Analyse.

In den folgenden Abschnitten wird die Berechnung bis zum Durchbrechen eines Fangnetzes durch einen Steinschlag behandelt. Die Todeszone wird am Schluss der Analyse bei der Gesamtkalkulation berücksichtigt.

## Verteilungen

Da Steinschläge über einen Zeitraum von drei Monaten aufgrund der begrenzten Anzahl an Ereignissen keine verlässlichen Aussagen über die aktuelle Gefahr ermöglichen, müssen Fälle nachgestellt werden und zwar möglichst viele. Um eine solche Simulation korrekt durchzuführen, werden die vorhandenen Daten der Steinschläge in die genannten Variablen Masse, Geschwindigkeit und zeitliche Abstände unterteilt.

Dann können diese Daten anhand ihren Eigenschaften simuliert werden. Davor wird aber jeder Variable eine Wahrscheinlichkeitsverteilung zugeordnet. Durch die Zuordnung können Fälle repdorduziert werden, welche die Eigenschaften der Daten anhand den gewählten theoretischen Modellen  widerspiegelen. Im nächsten Schritt werden den Variablen Verteilungen zugeteilt. Da zwei stellen an der Strasse von Steinschläge betroffen sind, müssen diese getrennt betrachtet werden, Beide Hänge haben ihre eigenen Eigenschaften bezüglich Masse, Geschwindigkeit und den Zeitlichen Unterscherschiede.

### Wahl der Verteilungen

Mit dem fitdistr-Package können die verschiedenen Verteilungen auf die Daten angewendet werden. 

Alle verwendeten Verteilungen durchlaufen dann einen Prozess, in dem die am besten geeignete Verteilung ermittelt wird. Der Prozess ist folgend durchgeführt worden:

- Zunächst wird ein Histogramm der Daten mit den Verteilungen als Linien betrachtet. Die Verteilungen, welche den Balken besser folgen sind eher geeignet.

- In einem Cullen-Frey-Diagramm, werden die Datenpunkte zusammen mit den Verteilungen verglichen. Die Verteilungen, die am nächsten an den Beobachtungspunkten liegen, sind tendenziell besser geignet.

- Mit der Funktion UnivariateML können verschiedene Verteilungen bereits im Vorhinein getestet werden, um herauszufinden, welche am besten zu den Daten passt. Diese Funktion vergleicht die Kompatibilität der Daten mit verschiedenen Verteilungen und bietet somit eine Möglichkeit, eine mögliche Passform für die vorliegenden Daten zu ermitteln. Diese Funktion unterstützt die Auswahl von den verschiedenen Verteilungen.

Diese drei Schritte allein erlauben noch keine endgültige Entscheidung darüber, welche Verteilung am besten geeignet ist. Sie dienen jedoch dazu, die Auswahl der möglichen Verteilungen einzuschränken und eine Orientierung zu geben, mit welchen Daten gearbeitet wird. 

- Nachdem nun einige Verteilungen ausgeschlossen werden konnten, kann man sich den möglichen Verteilungen zuwenden. Man betrachtet die Verteilungen anhand von CDF-, QQ- und PP-Plots. Die Punkte in den Plots stellen die vorhandenen Daten auf der Y-Achse dar, im Vergleich zu den theoretischen Werten, welche die Verteilung erzeugt, auf der X-Achse. Danach kann eine endgültige Entscheidung getroffen werden.

In Fällen, in denen die Verteilungen ähnlich sind und eine Entscheidung schwierig ist, sollte Folgendes berücksichtigt werden.

-Grössere Massen und grössere Geschwindigkeit bedeuten ein höheres Risiko, daher ist es wichtiger, die grössten Daten auf den QQ-, CDF- und PP-Plots abzudecken, als kleinere Daten.

- Bei den Zeitlichen Abständen sind kleinere Daten wichtiger, da weniger Zeitintervalle mehrere Steinschläge bedeuten und somit eine grössere Gefahr darstellen. In diesem Fall ist es wichtiger, die kleineren Daten in den QQ-, CDF- und PP-Plots abzudecken, als die grossen.

Im nächsten Abschnitt befindet sich die Anwendung dieses Prozess auf beide Hänge. 

```{r, echo = FALSE}

library(tidyverse)
library(fitdistrplus)
library(univariateML)
library(MASS)
library(dplyr)

# Read Data
zone_raw_1 <- read.csv("resources/out_1.csv")

# Data Wrangling
zone_1 <- zone_raw_1 %>% 
  filter(Datum != "",) %>% 
  mutate(
    datetime = ymd_hm(paste(Datum, Uhrzeit, sep = " ")), 
    masse = Masse..kg., 
    velocity = Geschwindigkeit..m.s.) %>% 
  arrange(datetime) %>% 
  filter(masse > 0) %>% 
  dplyr::select(datetime, masse, velocity)


# Data Wrangling for Time Difference
time_diff_1 <- data.frame(
  stunden = as.numeric(diff(zone_1$datetime))
  ) %>% 
  mutate(stunden = stunden /60/60) # Um stunden zu erhalten
```

### Zone 1 Masse

Zunächst wird die Zone 1 hinsichtlich Masse untersucht.
Beim Ausschlussverfahren zeigt sich, dass nur die Weibull- und die Lognormalverteilung in Frage kommen könnten.
Der Vorschlag von UnivariateML ist die Lognormalverteilung. 

Vergleicht man die Masse am Zone 1 zwischen der Lognormalverteilung und der Weibullverteilung, so würde die Lognormalverteilung insgesamt besser die Daten abdecken, nur das letzte Quantil im QQ-Plot weicht deutlich ab. 

Bei der Weibullverteilung weichen die Punkte ebenfalls von der Linie ab, aber insbesondere die letzten Quantile passen zu dieser Verteilung. 

Trotz kleiner Abweichungen wird die Weibull-Verteilung zugewiesen. Gemäss letztem Schritt im Prozess ist es wichtig, dass die grössten Massen gedeckt sind. 

```{r, echo = FALSE}
# Calc Distribution
mass.norm_1 <- fitdist(zone_1$masse, "norm")
mass.unif_1 <- fitdist(zone_1$masse, "unif")
mass.lnorm_1 <- fitdist(zone_1$masse, "lnorm")
mass.weibull_1 <- fitdist(zone_1$masse, "weibull")
mass.legend_1 <- c("Normal", "Unif", "Lognormal","Weibull")
zone_1_mass <- mass.weibull_1
```

```{r, echo = FALSE}
# Plot different Distributions for mass
denscomp(list(mass.norm_1, mass.unif_1, mass.lnorm_1, mass.weibull_1), legendtext = mass.legend_1, plotstyle = "ggplot")
```

### Zone 1 Geschwindigkeit

Durch die erste Analyse filtert sich heraus, dass die Normal-, Weibull-, Exponential-, Gamma-, und Lognormalverteilung passen könnten.

Der Vorschlag von UnivariateML ist die Normalverteilung.

Nach dem Abgleich der Plots ist klar, dass die Normalverteilung am besten passt. Die Punkte verlaufen fast durchgehend entlang der Linie. Besonders in den oberen Werten ist diese Verteilung am nächsten bei der Linie. Daher wird die Normalverteilung zugewiesen.

```{r, echo = FALSE}
# Calc Distribution
velocity.norm_1 <- fitdist(zone_1$velocity, "norm")
velocity.expo_1 <- fitdist(zone_1$velocity, "exp")
velocity.unif_1 <- fitdist(zone_1$velocity, "unif")
velocity.lnorm_1 <- fitdist(zone_1$velocity, "lnorm")
velocity.gamm_1 <- fitdist(zone_1$velocity, "gamma")
velocity.weibull_1 <- fitdist(zone_1$velocity, "weibull")
velocity.legend_1 <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
zone_1_velocity <- velocity.norm_1

```

```{r, echo = FALSE}
# Plot different Distributions for velocity
denscomp(list(velocity.norm_1, velocity.expo_1, velocity.unif_1, velocity.lnorm_1, velocity.gamm_1, velocity.weibull_1), legendtext = velocity.legend_1, plotstyle = "ggplot")
```

### Zone 1 Zeitabstände

Die erste Analyse deutet in diesem Fall klar darauf hin, dass nur eine Exponential- oder Normalverteilung passend sein könnten. 

Der Vorschlag von UnivariateML ist die Exponentialverteilung.

Die Auswertung der Plots zeigt deutlich, dass die Exponentialverteilung am besten passt. Die kleineren Werte werden bei der Exponentialverteilung besser gedeckt. Die anderen Verteilungen weichen fest von der Linie ab. Daher wird die Exponentialverteilung zugewiesen.

```{r, echo = FALSE}
# Calc Distribution
time_diff.norm_1 <- fitdist(time_diff_1$stunden, "norm")
time_diff.unif_1 <- fitdist(time_diff_1$stunden, "unif")
time_diff.expo_1 <- fitdist(time_diff_1$stunden, "exp")
time_diff.legend_1 <- c("Normal", "Unif", "Expo")

zone_1_time <- time_diff.expo_1
```

```{r, echo = FALSE}
# Plot different Distributions for velocity
denscomp(list(time_diff.norm_1, time_diff.unif_1, time_diff.expo_1), legendtext = time_diff.legend_1, plotstyle = "ggplot")
```


```{r, echo = FALSE}
# Read Data
zone_raw <- read.csv("resources/out_2.csv")

# Data Wrangling
zone <- zone_raw %>% 
  filter(Date != "",) %>% 
  mutate(
    datetime = ymd_hm(paste(Date, Uhrzeit, sep = " ")), 
    masse = m..kg., 
    velocity = v..m.s.) %>% 
  arrange(datetime) %>% 
  filter(masse > 0) %>% 
  dplyr::select(datetime, masse, velocity)

# Data Wrangling for Time Difference
time_diff <- data.frame(
  stunden = as.numeric(diff(zone$datetime)))
```

### Zone 2 Masse

Nach einer ersten Prüfung bleiben die Verteilungen Weibull, Gamma, Exponential und Lognormal zur Auswahl. 

Der Vorschlag von UnivariateML ist die Exponentialverteilung.

Nach Bewertung der Plots wird die Exponentialverteilung zugewiesen. Gamma- und Weibullverteilungen sind zwar ähnlich wie die Exponentialverteilung, decken aber die oberen Werte schlechter ab. Lognormal liegt im Allgemeinen näher an der Linie, berücksichtigt aber den höchsten Wert nicht.

```{r, echo = FALSE}
# Calc Distribution
mass.norm <- fitdist(zone$masse, "norm")
mass.expo <- fitdist(zone$masse, "exp")
mass.unif <- fitdist(zone$masse, "unif")
mass.lnorm <- fitdist(zone$masse, "lnorm")
mass.gamm <- fitdist(zone$masse, "gamma")
mass.weibull <- fitdist(zone$masse, "weibull")
mass.legend <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
zone_2_mass <- mass.expo
```


```{r, echo = FALSE}
# Plot different Distributions for mass
denscomp(list(mass.norm, mass.expo, mass.unif, mass.lnorm, mass.gamm, mass.weibull), legendtext = mass.legend, plotstyle = "ggplot")

```

### Zone 2 Geschwindigkeit

Beim Ausschlusserfahren erkennt man, dass viele Verteilungen ausgewählt werden könnten. Normal-, Lognormal-, Weibull- und Gammaverteilung stehen zur Auswahl.

Der Vorschlag von UnivariateML ist die Weibullverteilung.

Die Auswertung zeigt, dass nur die Weibullverteilung die Daten umfangreich decken kann. Daher wird diese Verteilung zugewiesen.

```{r, echo = FALSE}
# Calc Distribution
velocity.norm <- fitdist(zone$velocity, "norm")
velocity.expo <- fitdist(zone$velocity, "exp")
velocity.unif <- fitdist(zone$velocity, "unif")
velocity.lnorm <- fitdist(zone$velocity, "lnorm")
velocity.gamm <- fitdist(zone$velocity, "gamma")
velocity.weibull <- fitdist(zone$velocity, "weibull")
velocity.legend <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
zone_2_velocity <- velocity.weibull
```


```{r, echo = FALSE}
# Plot different Distributions for velocity
denscomp(list(velocity.norm, velocity.expo, velocity.unif, velocity.lnorm, velocity.gamm, velocity.weibull), legendtext = velocity.legend, plotstyle = "ggplot")
```

### Zone 2 Zeitabstände

Nach der ersten Prüfung kann man die Auswahl auf Weibull-, Gamma-, Exponential- und Lognormalverteilung reduzieren. 

Der Vorschlag von UnivariateML ist die Gammaverteilung.

Beim Vergleich fällt schnell auf, dass Gamma- und Weibullverteilungen die einzigen Modelle sind, welche in Frage kommen. Die korrekte Verteilung in diesem Fall ist die Gammaverteilung, da diese sowohl der Empfehlung von UnivariateML entspricht als auch die unteren Werte besser abdeckt.

```{r, echo = FALSE}
# Calc Distribution
time_diff.norm <- fitdist(time_diff$stunden, "norm")
time_diff.expo <- fitdist(time_diff$stunden, "exp")
time_diff.unif <- fitdist(time_diff$stunden, "unif")
time_diff.lnorm <- fitdist(time_diff$stunden, "lnorm")
time_diff.gamm <- fitdist(time_diff$stunden, "gamma")
time_diff.weibull <- fitdist(time_diff$stunden, "weibull")
time_diff.legend <- c("Normal", "Exponential", "Unif", "Lognormal", "Gamma", "Weibull")
zone_2_time <- time_diff.gamm
```


```{r, echo = FALSE}
# Plot different Distributions for time difference
denscomp(list(time_diff.norm, time_diff.expo, time_diff.unif, time_diff.lnorm, time_diff.gamm, time_diff.weibull), legendtext = time_diff.legend, plotstyle = "ggplot")
```

### Gewählte Verteilungen 

Die folgenden Verteilungen wurden den Variablen zugeordnet:

Zone 1
- Masse: Weibullverteilung
- Geschwindigkeit: Normalverteilung
- Zeitliche Abstände: Exponentialverteilung

Zone 2:
- Masse: Exponentialverteilung
- Geschwindigkeit: Weibullverteilung
- Zeitliche Abstände: Gammaverteilung

\newpage

# Simulation

Nun sind den Zufallsvariablen Verteilungen zugeordnet. Der nächste Schritt ist die Simulation.

## Generieren

```{r}
amount_iteration <- 1e7
```

Das Generieren der Daten wurde ebenfalls in R umgesetzt. Dabei wurden die gewählten Verteilungen vom vorherigen Kapitel übernommen. [Verteilungen](#Verteilungen). Die Anzahl Steinschläge sind auf **`r amount_iteration`** Interation festgelegt worden.

```{r}
set.seed(8128) # The 4. perfect number
zone_1_generated = data.frame(
  mass = rweibull(amount_iteration, shape = zone_1_mass$estimate[1], scale = zone_1_mass$estimate[2]),
  velocity = rnorm(amount_iteration, mean = zone_1_velocity$estimate[1], sd = zone_1_velocity$estimate[2]),
  time_diff = rexp(amount_iteration, rate = zone_1_time$estimate[1])
)

zone_2_generated = data.frame(
  mass = rexp(amount_iteration, rate = zone_2_mass$estimate[1]),
  velocity = rweibull(amount_iteration, shape = zone_2_velocity$estimate[1], scale = zone_2_velocity$estimate[2]),
  time_diff = rgamma(amount_iteration, shape = zone_2_time$estimate[1], rate = zone_2_time$estimate[2])
)
```

Die Kinetische Energie wird anhand der Geschwindigkeit und Masse eines Steinschlags, mittels der Physikalischen Formel berechnet und in Kilo Newton Meter umgewandelt.

$$
E_{\text{kin}} = \frac{1}{2} \times m \times v^{2}
$$\newline

```{r}
zone_1_generated$kin_energy = 
  zone_1_generated$mass * zone_1_generated$velocity^2 * 0.5 / 1000

zone_2_generated$kin_energy = 
  zone_2_generated$mass * zone_2_generated$velocity^2 * 0.5 / 1000
```

// TODO: Show Plots with densetiy: ExtraGrid \newpage

## Wahrscheinlichkeitsberechnung

Durch die Simulation von Steinschlägen ist es nun möglich, die Wahrscheinlichkeit eines Todesfalls zu berechnen.

Mit den folgenden Angaben ist es möglich, die Wahrscheinlichkeit, dass das Sicherheitsnetz reisst je Steinschlag, auszurechnen. Dafür verwenden wir folgende Formel.

Dass bei einem Steinschlag die Sicherheitsnetze reissen, müsste die kinetische Energie höher sein als 1200 kNm oder 600 kNm und die Masse im Sicherheitsnetz grösser oder gleich 2000 kg sein. Das Sicherheitsnetz wird alle 24 Stunden geleert.

Um in der Simulation die Masse im Netz bei einem Steinschlag zu berechnen, werden rekursiv alle vergangenen Steinschläge, welche in den letzten 24 Stunden stattgefunden haben, durchlaufen und die Masse aufsummiert. Dadurch wird es ermöglicht, alle Steinschläge herauszufiltern, welche eine kinetische Energie von mindestens 1200 kNm haben oder mindestens 600 kNm und im Sicherheitsnetz eine Gesamtmasse von 2000 kg liegen.

```{r}
plan(multisession)
has_net_exceed_maxium <- function(index, mass_net, time_since_emptying, df) {
  if (index == 1) {
    return(FALSE)
  }
  time_since_emptying <- time_since_emptying + df$time_diff[index]
  if (time_since_emptying > 24) {
    return(FALSE)
  }
  mass_net <- mass_net + df$mass[index - 1]
  if (mass_net >= 2000) {
    return(TRUE)
  }
  return(has_net_exceed_maxium(index-1, mass_net, time_since_emptying, df))
}

monte_carlo <- function(df) {
  future_lapply(1:amount_iteration, function(i) {
  return(df$kin_energy[i] >= 1200 || (df$kin_energy[i] >= 600 && has_net_exceed_maxium(i, 0, 0, df)))
    }) %>% 
    unlist() %>% 
    sum()
}

monte_carlo_zone_2 <- monte_carlo(zone_2_generated)
monte_carlo_zone_1 <- monte_carlo(zone_1_generated)
```

Mit diesen Angaben ist es möglich, die Wahrscheinlichkeit, dass das Sicherheitsnetz reisst, auszurechnen. Dafür verwenden wir folgende Formel.

$$
P_{\text{Netz reisst}} = \frac{\text{Anzahl Netz Versagen}}{\text{Anzahl Steinschläge}} 
$$

Das ein Steinschlag in einem Todesfall endet muss zusätzlich ein Auto sich in der Todeszone befinden. Um die Wahrscheinlichkeit dafür zu berechnen wird die Zeit benötigt, welches ein Auto benötigt um für einen Möglichen Steinschlag zu bremsen. Dies lässt sich aus dem Bremsweg, was sich bei einer [Gefahrenbesmung bei 18m](https://www.adac.de/verkehr/rund-um-den-fuehrerschein/erwerb/anhalteweg-berechnen/) liegt, bei einer Geschwindigkeit von 60 km/h und der Geschwindigkeit, wie folgt berechnen.

$$
t = \frac{2s}{v} \Rightarrow \frac{2\times18m}{16.\overline{6}m/s} \approx 2.16s 
$$

Dazu wird noch die [Vorbremszeit von 1.2 Sekunde](https://www.adac.de/verkehr/rund-um-den-fuehrerschein/erwerb/reaktionsweg-berechnen/) addiert, welche ein Mensch braucht um auf die Bremse zu drücken. Damit kommt man auf *3.36 Sekunden*, welche ein Auto in der Gefahrenzone ist. Durch diesen Wert können wir die Wahrscheinlichkeit berechnen, dass ein Auto zu einem beliebigen Zeitpunkt in der Gefahrenzone ist.

$$
P_{\text{Auto anwesend}} = \frac{3.36 \times \text{Anazhl Autos Pro Tag}}{\text{Anzahl Sekunden Pro Tag}} \Rightarrow \frac{3.36 \times 600}{86400} = \frac{7}{300}
$$

Mit der Wahrscheinlichkeit, dass das Sicherheitsnetz reisst, ein Auto anwesend ist und der durchschnittlichen Steinschläge pro Jahr, lässt sich die Wahrscheinlichkeit eines tödlichen Unfalls in einer Zone für ein Jahr berechnen.

$$
P_{\text{Tödlicher Unfall pro Jahr}} = P_{\text{Auto anwesend}} \times P_{\text{Netz reisst}} \times \text{ Durchschnittliche Steinschläge pro Jahr}
$$

## Aussagekraft der Simulation

// TODO: mit Varianz und so. Könnte noch triky werden.

\newpage

# Ergebniss

\newpage

# Empfehlung

Auf Basis der durchgeführten ANalyse und der daraus resultierenden niedrigen jährlichen Warscheinlichkeit von Todesfällen, kann die Strasse ohne weiteres weiterhin offen bleiben.
